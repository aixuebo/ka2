Array相关的scala的Api doc文档说明
1.ArrayOps  是Array内部的隐式转换类
2.append(elms:A*) 表示追加一组元素
3.appendAll(xs:TraversableOnce[A])参数表示任何集合,只要实现了TraversableOnce的trait类即可。
4.count(p:(A)=>boolean) 表示参数p是一个函数,参数是数组的元素,返回值是boolean,记录返回true的个数
5.def +=(elem:A):ArrayBuffer.this.type 表示参数是数组的元素类型的,返回值返回该ArrayBuffer本身,可以做chain链式追加元素
6.copyToArray[B>:A](xs:Array[B]):Unit 
  表示copy这个数组,元素是A的数组,到参数的元素是B的数组中,无返回值,因为参数是引用,因此引用中已经有了多余的数据了。
其中B允许是A的super父类。
例如 你可以copy ArrayBuffer[Int] 到 Array[Any]中
7.max[B >:A ](implicit cop:Ordering[B] ):A 
表示获取数组中最大的一个元素A
  首先B是A的父类,原始数组是元素A类型,参数数组是B类型元素
参数cop是实现了Orderig排序的类,可以针对B类型的进行排序,因此元素A是B的子类,而B实现了排序方法,因此就可以对元素A进行排序了,如果A中没有实现比较方法的时候,会隐式转换到父类B中进行比较
8.padTo[B >:A,That ] (len:Int,elem:B) (implicit bf:CanBuildFrom[ArrayBuffre[A],B,That ] ) : That
这个方法暂时没看懂,但是可以了解一下语法
简单的
padTo(len:int,ejem:B):That 
剩下的都是约束,
比如第一部分,约束B是A的父类,以及That的类型
第二部分声明了一个隐式转换类,该类接收三个参数ArrayBuffer[A] B That
9.函数调用
import scala.math._
val num = 3.14
val fun = ceil _  //设置fun变量为一个ceil函数,_表示该函数需要一个参数
fun的类型是(Double) => Double,表示这个函数是接受一个Double类型的参数,返回一个Double类型的值
10.在一个线程中运行函数block,该函数是没有参数,并且无返回值的函数
def runInThread(block: () => Unit) {
	new Thread {
		override def run() { block() }
	}.start()
}
11.val a = Array("Hello", "World")
val b = Array("hello", "world")
a.corresponds(b)(_.equalsIgnoreCase(_))
函数定义
def corresponds[B](that: Seq[B])(p: (A, B) => Boolean): Boolean
这个序列化的参数和断言函数参数是curried参数分割的.

这个类型的推论,可以推算出B,
在我们的例子中,that是String的字符串数组,因此p校验函数希望(String, String) => Boolean
_.equalsIgnoreCase(_) 表示 (a: String, b: String) => a.equalsIgnoreCase(b).

12.在一个线程中运行函数block,该函数是没有参数,并且无返回值的函数
def runInThread(block: () => Unit) {
	new Thread {
		override def run() { block() }
	}.start()
}
调用:
runInThread { 
	() => println("Hi"); Thread.sleep(10000);  println("Bye") 
}
应该避免使用(),使用符号:,修改
def runInThread(block: => Unit) {
	new Thread {
		override def run() { block }
	}.start()
}
调用
runInThread { println("Hi"); Thread.sleep(10000); println("Bye") }

13.
