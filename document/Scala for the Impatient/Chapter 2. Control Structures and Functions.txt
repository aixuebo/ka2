Topics in This Chapter
• 2.1 Conditional Expressions — page 14
• 2.2 Statement Termination — page 15
• 2.3 Block Expressions and Assignments — page 16
• 2.4 Input and Output — page 17
• 2.5 Loops — page 18
• 2.6 Advanced for Loops and for Comprehensions — page 19
• 2.7 Functions — page 20
• 2.8 Default and Named Arguments — page 21
• 2.9 Variable Arguments — page 22
• 2.10 Procedures — page 23
• 2.11 Lazy Values — page 23
• 2.12 Exceptions — page 24
• Exercises — page 26
In this chapter, you will learn how to implement conditions, loops, and functions in Scala. You will encounter a fundamental
difference between Scala and other programming languages. In Java or C++, we differentiate between expressions (such as 3
+ 4) and statements (for example, an if statement). An expression has a value; a statement carries out an action. In Scala,
almost all constructs have values. This feature can make programs more concise and easier to read.
Here are the highlights of this chapter:
• An if expression has a value.
• A block has a value—the value of its last expression.
• The Scala for loop is like an “enhanced” Java for loop.
• Semicolons are (mostly) optional.
• The void type is Unit.
• Avoid using return in a function.
• Beware of missing = in a function definition.
• Exceptions work just like in Java or C++, but you use a “pattern matching” syntax for catch.
• Scala has no checked exceptions.

一、条件表达式
1.if (x > 0) 1 else -1 与java相同,但是这个表达式是有返回值的,该返回值会给一个变量
2.val s = if (x > 0) 1 else -1
  这语法与java的以下语法相同 if (x > 0) s = 1 else s = -1
3.每一个返回值要有一个类型,根据表达式的输出可以判断返回值类型,例如上面的例子返回值就是int类型
  但是如果if 和else两个分支的返回类型不同,那么返回类型就一定是两个分支公共父类即可
  eg:if (x > 0) "positive" else -1 ,int和String公共父类是Any
4.如果else部分被忽略掉,例如if (x > 0) 1,但是返回值确实anyVal类型的,而不是int类型的
原因是,在scala中没有任何值的class 被写成(),因此上面的语法因为没有else,因此等同于if (x > 0) 1 else ()
想像一下,()是一个占位符,表示没有有效的值,相当于java的void
那么任何和占位符共同的父类就是anyVal类型

5.scala中没有switch statement语句,但是他有更强大的模式匹配,后续会介绍
6.注意,在REPL控制台上,执行以下语句是有问题的
if (x > 0) 1
else if (x == 0) 0 else -1
因为控制台必须要写在一行上

二、Statement Termination 语法的终止




