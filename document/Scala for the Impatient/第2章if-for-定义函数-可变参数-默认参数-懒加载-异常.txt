第二章if-for-定义函数-可变参数-默认参数-懒加载-异常

• An if expression has a value.
• A block has a value—the value of its last expression.
• The Scala for loop is like an “enhanced” Java for loop.
• Semicolons are (mostly) optional.
• The void type is Unit.
• Avoid using return in a function.
• Beware of missing = in a function definition.
• Exceptions work just like in Java or C++, but you use a “pattern matching” syntax for catch.
• Scala has no checked exceptions.

一、条件表达式
1.if (x > 0) 1 else -1 与java相同,但是这个表达式是有返回值的,该返回值会给一个变量
2.val s = if (x > 0) 1 else -1
  这语法与java的以下语法相同 if (x > 0) s = 1 else s = -1
3.每一个返回值要有一个类型,根据表达式的输出可以判断返回值类型,例如上面的例子返回值就是int类型
  但是如果if 和else两个分支的返回类型不同,那么返回类型就一定是两个分支公共父类即可
  eg:if (x > 0) "positive" else -1 ,int和String公共父类是Any
4.如果else部分被忽略掉,例如if (x > 0) 1,但是返回值确实anyVal类型的,而不是int类型的
原因是,在scala中没有任何值的class 被写成(),因此上面的语法因为没有else,因此等同于if (x > 0) 1 else ()
想像一下,()是一个占位符,表示没有有效的值,相当于java的void
那么任何和占位符共同的父类就是anyVal类型

5.scala中没有switch statement语句,但是他有更强大的模式匹配,后续会介绍
6.注意,在REPL控制台上,执行以下语句是有问题的
if (x > 0) 1
else if (x == 0) 0 else -1
因为控制台必须要写在一行上

二、Statement Termination 语法的终止
if (n > 0) { r = r * n; n -= 1 }
scala不要求一定要有分号,但是当一行中有多个语句的时候,每个语句要用分号分隔开。

或者按照下面的方式,每一行一个语句也可以,并且建议这么写
if (n > 0) { 
r=r*n 
n -= 1 
} 

三、语句块表达式以及分配结果
java中语句块被包裹在{}里面,当你要在if分支或者循环，或者实现体的时候都会把多行语句进行包裹。
在scala里面也是一样,只是最后一个表达式是一个结果,这个结果值作为返回语句被返回给一个变量。

eg:
val distance = { val dx = x - x0; val dy = y - y0; sqrt(dx*dx+dy*dy) } 
这个表示计算编辑距离的公式,经过计算,返回值就是distance。

如果最后一个表达式分配变量的,则返回值是Unite类型的
eg
var s={ r = r * n; n -= 1 }
s: Unit = ()
没有返回值,因为设置n的值是最后一个语句,因此他是没有最后一个表达式的，也就没有返回值函数

x=y=1,在java语言中是x和y都是1,但是在scala中就有异常,因为y=1是赋值语句,没有返回值，x=一个没有返回值的函数

四、输入输出
1.println("Answer: " + 42)  表示打印字符串
2.printf("Hello, %s! You are %d years old.\n", "Fred", 42) 

五、循环
1.while和do while循环与java语法一样
demo
while (n > 0) {
 r=r*n n -= 1 
} 
2.for循环没有直接的类似java的一下语法,for(initialize; test; update) 
3.for循环scala语法
for (i <- 1 to n) {
r=r*i 
}
因为1 to n是RichInt类的to方法,返回Range对象,
因此正确的格式是for (i <- expr) 
也就是循环表达式的每一个元素,i的类型依赖于表达式的返回类型
注意:
i前面没有var或者val,
字符串可以直接被循环
var sum = 0 for (ch <- "Hello") sum += ch 

或者
val s = "Hello" var sum = 0 for (i <- 0 until s.length) // Last valuefor i is s.length - 1 
sum += s(i)


在scala中,循环不是经常被使用,因为在一个序列化的集合中,我们经常使用一个函数去处理每一个元素,每一个元素调用函数即可，不需要单独写for循环

scala的for循环没有break和continue语法,如果我们需要这么做的时候，有以下方式
1.使用boolean的变量控制
2.使用break方法在Breaks对象中
import scala.util.control.Breaks._ 
breakable { 
for (...) { if (...) break; // Exits the breakable block ... 
} } 
这种控制方式是通过抛异常和处理异常的方式进行的，所以应该避免在时间很重要的场景下使用

高级版的for循环
1.以前的是标准的for循环
2.用多个表达式,每一个表达式用分号分隔，相当于for里面嵌套这for,
for (i <- 1 to 3; j <- 1 to 3) print((10 * i + j) + " ") // Prints 11 12 13 21 22 23 31 32 33 
因此输出是9个数据
3.循环过程中可以使用if去控制
for (i <- 1 to 3; j <- 1 to 3 if i != j) print((10 * i + j) + " ") // Prints 12 13 21 23 31 32 
注意if前面是没有分号的，也就是说for循环的表达式要分号，但是 最后的判断是不要分号的,输出的只是满足if条件的结果。
4.可以在for循环里面定义任意多个变量
for(i<-1to3;from =4-i;j<-from to3)print((10*i+j)+"") // Prints 13 22 23 31 32 33 
我们定义了一个from,他的值是跟j有关系,因此可以确定j的值
5.当for循环的循环体以yield开头的时候,这个循环将会产生一个集合
for(i<-1to10)yield i%3 // Yields Vector(1, 2, 0, 1, 2, 0, 1, 2, 0, 1) 
每一个值与3取余数,最终返回一个Vector集合
for (c <- "Hello"; i <- 0 to 1) yield (c + i).toChar // Yields "HIeflmlmop" 
每一个元素都转变成2个字符串
for (i <- 0 to 1; c <- "Hello") yield (c + i).toChar // Yields Vector('H', 'e', 'l', 'l', 'o', 'I', 'f', 'm', 'm', 'p') 
与上面方式一样，但是结果类型不一样，是vector，结果类型取决于第一个表达式类型

6.如果多个表达式不想用分号区分的话，可以让他们每一个在一行输出
for { i <- 1 to 3 
from = 4 - i j <- from to 3 
} 

七、functions函数
1.定义一个函数，包括name、参数、函数体
def abs(x: Double) = if (x >= 0) x else -x 
2.所以参数都要描述好类型,但是只要不是递归操作的函数,都不需要指定返回类型,
scala编译器会通过最后一个表达式决定返回类型。
def fac(n : Int) = {
var r = 1
for (i <- 1 to n) r = r * i
r
}
该表达式返回r,就是返回int类型
3.递归函数必须指定返回值的原因
deffac(n:Int):Int =if(n<=0) 1 else n*fac(n-1)
如果不指定返回值，scala不知道n*fac(n-1)的int类型的

八、为函数设置默认的参数值
def decorate(str: String, left: String = "[", right: String = "]") = left + str + right
调用方式:
1.decorate("Hello"),you get"[Hello]"
2.decorate("Hello", ">>>[")  >>>[Hello]
3.decorate(left = "<<<", str = "Hello", right = ">>>") The result is "<<<Hello>>>"
4.decorate("Hello", right = "]<<<") // Calls decorate("Hello", "[", "]<<<")

九、可变的参数
1.demo
def sum(args: Int*) = {
var result = 0
for (arg <- args) result += arg 
result
}
调用val s = sum(1, 4, 9, 16, 25)
注意:
val s = sum(1 to 5) // Error
参数不能是序列化的对象
因为sum的参数是int类型的,而不是range类型的

2.修改
val s = sum(1 to 5: _*) // Consider 1 to 5 asanargumentsequence
def recursiveSum(args: Int*) : Int = {
if (args.length == 0) 0
else args.head + recursiveSum(args.tail : _*)
}
tail是其他的序列化对象

十、procedure函数
1.表示返回值是unit类型的函数称为procedure
def box(s : String) { // Lookcarefully:no =
val border = "-" * s.length + "--\n" 
println(border + "|" + s + "|\n" + border)
}

十一、懒加载value
1.当一个val被声明为lazy的时候,初始化被延期,直到第一次访问该属性时候被初始化。
eg:
lazy val words = scala.io.Source.fromFile("/usr/share/dict/words").mkString 
读取文件的所有内容到一个字符串中。
如果该words没有被访问,这个文件就没有真正没打开,作为校验,我们可以将文件名写错,当初始化的时候,这行代码是没问题的,只有后续使用words的时候才会发现这行是error。
2.懒加载延迟初始化一些贵重的资源时候是很有用的,尤其处理循环依赖的资源时。
3.懒加载在val和def使用的比较
val words = scala.io.Source.fromFile("/usr/share/dict/words").mkString 
表示立刻会执行打开一个文件
lazy val words = scala.io.Source.fromFile("/usr/share/dict/words").mkString 
表示当第一次使用的时候会被打开一个文件
def words = scala.io.Source.fromFile("/usr/share/dict/words").mkString 
表示当words每次被使用的时候,都会打开一个文件

十二、exception
1.java中存在运行期检查异常,程序员必须声明并且实现它,不幸的是他让方法名后面有很长的异常代码,以及要实现各种exception的处理逻辑,很多程序员是仅仅实现了exception即可。
因此scala设计上取消了运行期异常检查的语法。
2.scala异常与java语法一样
throw new IllegalArgumentException("x should not be negative")
出现异常的时候,当前运行的会被终止,上级调用者处理异常逻辑,如果上级没有处理异常的逻辑,则继续向上抛。
3.throw表达式有一个特殊的类型：Nothing.
在if else表达式中很有用,
var s = if (x>0) 5 else throw new Exception("ss")
这个表达式返回整数,else返回Nothing
4.如何处理异常,使用模式匹配方式
val url = new URL("http://horstmann.com/fred-tiny.gif") 
try {
process(url) 
} catch {
case _: MalformedURLException => println("Bad URL: " + url)
case ex: IOException => ex.printStackTrace() 
}
注意
a.与java中一样,更通用的异常,应该在具体的异常之后，例如IOException。
b.这个例子中_就表示后面没有使用该异常,因此用_通配符代替。
5.finally释放最终资源
var in = new URL("http://horstmann.com/fred.gif").openStream() try { 
process(in) } finally { 
in.close() } 